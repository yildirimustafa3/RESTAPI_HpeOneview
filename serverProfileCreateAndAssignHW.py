# This is one compact script that has multiple tasks.
#       1) It retrieves all the available targets(the hosts that don't have Server Profile) *it is like "getAvailableTargets.py" is already embedded in this script.
#       2) It creates Server Profile and assign it to hosts that is found on firs step(available targets)
#           - for Server profile settings, I highly recommend create one from Oneview UI and GET settings from that one.
#           - 
# Öncelikle belirtilen Oneview'da hangi available targetların(server profile ihtiyacı olan sunucular) listesini ceker. 
# Sonrasında SERVER PROFILE oluşturan ve oluştururken serverHardwareUri(yani UUID)si çekilmiş sunucuları hardware olarak ekleyen script.
# 
# @author Mustafa Yıldırım

from typing import Awaitable
import requests
import json
import urllib3
import time
urllib3.disable_warnings() #With this statement, SSL warnings that is being received everytime the script is run is ignored.


#==========================================Variables that needs to be edited accordingly your environment==========================================================
oneviewip="10.X.X.X"#hangi oneview'a eklenecekse düzeltilmeli
auth_token='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' #getAuthtoken.py kullanılarak alınan token yazılmalı
serverprofileTemplateName="DENEME" #Olusturulmak istenen server profile templatein ismi girilmesi gereken alan
#===============================================First task: Retrieving available targets====================================================================================
url = f"https://{oneviewip}/rest/server-profiles/available-targets"

payload={}
headers = {
  'Auth': auth_token,
  'X-Api-Version': '3000',#oneview 6.30 --> 'x-api-key': '3200' 6.20 -->'x-api-key': '3000'
  'Content-Type': 'application/json'
}


response = requests.request("GET", url, headers=headers, data=payload,verify=False)
hw_uri_and_name={}
for i in response.json()['targets']:
  hw_uri_and_name[i['serverHardwareName']]=i['serverHardwareUri']


print(url,":I connected to Oneview and retrieved available targets and saved them into the hw_uri_and_name dictionary as key,value pair.")

################################################Second Task: Create Server Profile and Assign it to HW retrieved above ########################################################################

location=[]
url_2 = f"https://{oneviewip}/rest/server-profiles?force=ignoreServerHealth" # ?force=ignoreServerHealth is important otherwise if the server hardware has any warnings,alarms on it(e.g. Security Risk, ports down, ilo communication..)
# ?force=ignoreServerHealth unfortunately doesn't mentioned in oneview Rest API documents, I saw it through Chrome developer tools network capture.
for ilo_name,hw_uri in hw_uri_and_name.items():

    #print(ilo_name,hw_uri)  #if you want to see what ilo_name ve hw_uri corresponds to just uncomment this line

    payload = json.dumps({ # be aware of settings can differ a lot for your environment
    "serverHardwareUri": hw_uri,
    "serverHardwareTypeUri": "/rest/server-hardware-types/520A0FDD-D3F4-48A4-8363-2EE759242936", #server model e.g. DL 360 veya DL 380
    "serialNumberType": "Physical",
    "iscsiInitiatorNameType": "AutoGenerated",
    "macType": "Physical",
    "wwnType": "Physical",
    "name": ilo_name,
    "description": "",
    "affinity": None,
    "connectionSettings": {
        "connections": []
    },
    "boot": {
        "manageBoot": False
    },
    "bootMode": {
        "manageMode": True,
        "mode": "UEFIOptimized",
        "secureBoot": "Unmanaged",
        "pxeBootPolicy": "Auto"
    },
    "firmware": {
        "manageFirmware": True,
        "firmwareBaselineUri": "/rest/firmware-drivers/SPP_Custom_trendyol", #SPP packets mentined in Server Profile Template that this server profile is associated with.
        "forceInstallFirmware": False,
        "firmwareInstallType": "FirmwareOnlyOfflineMode",
        "firmwareScheduleDateTime": "",
        "firmwareActivationType": "Immediate"
    },
    "bios": {
        "manageBios": True,
        "overriddenSettings": [
        {
            "id": "WorkloadProfile",
            "value": "Virtualization-MaxPerformance"
        },
        {
            "id": "MinProcIdlePower",
            "value": "NoCStates"
        },
        {
            "id": "IntelUpiPowerManagement",
            "value": "Disabled"
        },
        {
            "id": "SubNumaClustering",
            "value": "EnableSnc2"
        },
        {
            "id": "MinProcIdlePkgState",
            "value": "NoState"
        },
        {
            "id": "EnergyPerfBias",
            "value": "MaxPerf"
        },
        {
            "id": "UncoreFreqScaling",
            "value": "Maximum"
        },
        {
            "id": "PowerRegulator",
            "value": "StaticHighPerf"
        },
        {
            "id": "CollabPowerControl",
            "value": "Disabled"
        },
        {
            "id": "DynamicIntelSpeedSelectMode",
            "value": "Disabled"
        },
        {
            "id": "EnergyEfficientTurbo",
            "value": "Disabled"
        },
        {
            "id": "NumaGroupSizeOpt",
            "value": "Clustered"
        }
        ]
    },
    "managementProcessor": {
        "manageMp": False,
        "mpSettings": []
    },
    "hideUnusedFlexNics": True,
    "iscsiInitiatorName": "",
    "serverProfileTemplateUri": "/rest/server-profile-templates/4b7e5e6c-9485-4278-919f-8e4b0acd6264", #Server Profile Template uri that this server profile is associated with.
    "osDeploymentSettings": None,
    "localStorage": {
        "sasLogicalJBODs": [],
        "controllers": []
    },
    "sanStorage": None,
    "initialScopeUris": []
    })


    response = requests.request("POST", url_2, headers=headers, data=payload,verify=False)
    try:
        #print(response.headers)
        #print(response.headers['Location'])
        location.append(response.headers['Location'])
    except:
        print("couldn't write response headers")

print("Tasks are started and here uri's of them:")
print(location)

print("Ne kadar üstünde serverprofile olmayan sunucu varsa hepsine server profile assign ettim")
print("All hosts that doesn't have serverprofile (available targets) are now assigned with server profile. Just a lil bit for Oneview tasks to finish.")


####### After this line, you can erase everything, I am just trying to add this script to function that, it checks percentage of tasks until it is 100% in parallel.
####### I will work on this later, but didn't want to delete. Just ignore below, or basically delete it.
####### en geniş comment blogu kaldırılarak kaldıgım yerden devam et, her task kendisi %100 olana dek print ettir.
 

'''
def task_percent_function():
    geciciliste=[]
    try:
        for tt,loc in enumerate(location):
            print(tt,loc)
            my_url=f"https://10.84.8.93{loc}"
            payload2={}
            response = requests.request("GET", my_url, headers=headers, data=payload2,verify=False)
            geciciliste.append(response.json()['computedPercentComplete'])
            print(my_url,response.json()['computedPercentComplete'],response.json()['taskStatus'],response.json()['taskState'])
            time.sleep(1)
        
        """
        for tt,loc in enumerate(location):
            my_url=f"https://10.84.8.93{loc}"
            payload2={}
            response = requests.request("GET", my_url, headers=headers, data=payload2,verify=False)
            for item in geciciliste:
                while(response.json()['computedPercentComplete']<99):
                    print(response.json()['computedPercentComplete'])
                    time.sleep(1)
                    print("**************************")
        
        """
    except:
        print("olmadi")



task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()
time.sleep(20)
task_percent_function()


'''